/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MentorshipSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activeSessionsByHash"
      | "eduToken"
      | "endSession"
      | "getMentorRating"
      | "getMentorSessions"
      | "getStudentSessions"
      | "mentors"
      | "nftContract"
      | "platformFee"
      | "platformWallet"
      | "rateMentor"
      | "registerMentor"
      | "registerStudent"
      | "sessionCounter"
      | "sessions"
      | "setNFTContract"
      | "startSession"
      | "students"
      | "updateHourlyRate"
      | "updateMentor"
      | "updateMentorStatus"
      | "updatePlatformFee"
      | "withdrawEduTokenEmergency"
      | "withdrawEmergency"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementMinted"
      | "MentorRegistered"
      | "MentorUpdated"
      | "PaymentProcessed"
      | "SessionCompleted"
      | "SessionEnded"
      | "SessionStarted"
      | "StudentRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activeSessionsByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "eduToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endSession",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMentorRating",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMentorSessions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentSessions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mentors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateMentor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMentor",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStudent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sessionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sessions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startSession",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "students",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHourlyRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMentor",
    values: [AddressLike, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMentorStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEduTokenEmergency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEmergency",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activeSessionsByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eduToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMentorRating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMentorSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentSessions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mentors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateMentor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMentor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStudent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sessionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sessions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNFTContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "students", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateHourlyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMentor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMentorStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEduTokenEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEmergency",
    data: BytesLike
  ): Result;
}

export namespace AchievementMintedEvent {
  export type InputTuple = [
    student: AddressLike,
    tokenId: BigNumberish,
    sessionId: BigNumberish
  ];
  export type OutputTuple = [
    student: string,
    tokenId: bigint,
    sessionId: bigint
  ];
  export interface OutputObject {
    student: string;
    tokenId: bigint;
    sessionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MentorRegisteredEvent {
  export type InputTuple = [
    mentorAddress: AddressLike,
    name: string,
    expertise: string
  ];
  export type OutputTuple = [
    mentorAddress: string,
    name: string,
    expertise: string
  ];
  export interface OutputObject {
    mentorAddress: string;
    name: string;
    expertise: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MentorUpdatedEvent {
  export type InputTuple = [
    mentorAddress: AddressLike,
    name: string,
    expertise: string,
    hourlyRate: BigNumberish,
    isAvailable: boolean
  ];
  export type OutputTuple = [
    mentorAddress: string,
    name: string,
    expertise: string,
    hourlyRate: bigint,
    isAvailable: boolean
  ];
  export interface OutputObject {
    mentorAddress: string;
    name: string;
    expertise: string;
    hourlyRate: bigint;
    isAvailable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [sessionId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [sessionId: bigint, amount: bigint];
  export interface OutputObject {
    sessionId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionCompletedEvent {
  export type InputTuple = [sessionId: BigNumberish];
  export type OutputTuple = [sessionId: bigint];
  export interface OutputObject {
    sessionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionEndedEvent {
  export type InputTuple = [
    mentor: AddressLike,
    student: AddressLike,
    endTime: BigNumberish
  ];
  export type OutputTuple = [mentor: string, student: string, endTime: bigint];
  export interface OutputObject {
    mentor: string;
    student: string;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionStartedEvent {
  export type InputTuple = [
    mentor: AddressLike,
    student: AddressLike,
    startTime: BigNumberish
  ];
  export type OutputTuple = [
    mentor: string,
    student: string,
    startTime: bigint
  ];
  export interface OutputObject {
    mentor: string;
    student: string;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StudentRegisteredEvent {
  export type InputTuple = [studentAddress: AddressLike, name: string];
  export type OutputTuple = [studentAddress: string, name: string];
  export interface OutputObject {
    studentAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MentorshipSystem extends BaseContract {
  connect(runner?: ContractRunner | null): MentorshipSystem;
  waitForDeployment(): Promise<this>;

  interface: MentorshipSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activeSessionsByHash: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        sessionId: bigint;
        mentor: string;
        student: string;
        startTime: bigint;
        duration: bigint;
        amount: bigint;
        isActive: boolean;
        isPaid: boolean;
        isCompleted: boolean;
        nftMinted: boolean;
      }
    ],
    "view"
  >;

  eduToken: TypedContractMethod<[], [string], "view">;

  endSession: TypedContractMethod<
    [_studentAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getMentorRating: TypedContractMethod<
    [_mentorAddress: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  getMentorSessions: TypedContractMethod<
    [_mentorAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  getStudentSessions: TypedContractMethod<[], [bigint[]], "view">;

  mentors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, bigint, bigint] & {
        walletAddress: string;
        name: string;
        expertise: string;
        hourlyRate: bigint;
        isAvailable: boolean;
        rating: bigint;
        totalRatings: bigint;
      }
    ],
    "view"
  >;

  nftContract: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  platformWallet: TypedContractMethod<[], [string], "view">;

  rateMentor: TypedContractMethod<
    [_mentorAddress: AddressLike, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerMentor: TypedContractMethod<
    [_name: string, _expertise: string, _hourlyRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerStudent: TypedContractMethod<[_name: string], [void], "nonpayable">;

  sessionCounter: TypedContractMethod<[], [bigint], "view">;

  sessions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        sessionId: bigint;
        mentor: string;
        student: string;
        startTime: bigint;
        duration: bigint;
        amount: bigint;
        isActive: boolean;
        isPaid: boolean;
        isCompleted: boolean;
        nftMinted: boolean;
      }
    ],
    "view"
  >;

  setNFTContract: TypedContractMethod<
    [_nftContract: AddressLike],
    [void],
    "nonpayable"
  >;

  startSession: TypedContractMethod<
    [_mentorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  students: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, string] & {
        walletAddress: string;
        name: string;
        isRegistered: boolean;
        currentMentor: string;
      }
    ],
    "view"
  >;

  updateHourlyRate: TypedContractMethod<
    [_newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMentor: TypedContractMethod<
    [
      _mentorAddress: AddressLike,
      _name: string,
      _expertise: string,
      _hourlyRate: BigNumberish,
      _isAvailable: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateMentorStatus: TypedContractMethod<
    [_isAvailable: boolean],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawEduTokenEmergency: TypedContractMethod<[], [void], "nonpayable">;

  withdrawEmergency: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activeSessionsByHash"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        sessionId: bigint;
        mentor: string;
        student: string;
        startTime: bigint;
        duration: bigint;
        amount: bigint;
        isActive: boolean;
        isPaid: boolean;
        isCompleted: boolean;
        nftMinted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eduToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endSession"
  ): TypedContractMethod<[_studentAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMentorRating"
  ): TypedContractMethod<
    [_mentorAddress: AddressLike],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMentorSessions"
  ): TypedContractMethod<[_mentorAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getStudentSessions"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "mentors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, bigint, bigint] & {
        walletAddress: string;
        name: string;
        expertise: string;
        hourlyRate: bigint;
        isAvailable: boolean;
        rating: bigint;
        totalRatings: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rateMentor"
  ): TypedContractMethod<
    [_mentorAddress: AddressLike, _rating: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerMentor"
  ): TypedContractMethod<
    [_name: string, _expertise: string, _hourlyRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerStudent"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sessionCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sessions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        sessionId: bigint;
        mentor: string;
        student: string;
        startTime: bigint;
        duration: bigint;
        amount: bigint;
        isActive: boolean;
        isPaid: boolean;
        isCompleted: boolean;
        nftMinted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setNFTContract"
  ): TypedContractMethod<[_nftContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSession"
  ): TypedContractMethod<[_mentorAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "students"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, string] & {
        walletAddress: string;
        name: string;
        isRegistered: boolean;
        currentMentor: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateHourlyRate"
  ): TypedContractMethod<[_newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMentor"
  ): TypedContractMethod<
    [
      _mentorAddress: AddressLike,
      _name: string,
      _expertise: string,
      _hourlyRate: BigNumberish,
      _isAvailable: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMentorStatus"
  ): TypedContractMethod<[_isAvailable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawEduTokenEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawEmergency"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AchievementMinted"
  ): TypedContractEvent<
    AchievementMintedEvent.InputTuple,
    AchievementMintedEvent.OutputTuple,
    AchievementMintedEvent.OutputObject
  >;
  getEvent(
    key: "MentorRegistered"
  ): TypedContractEvent<
    MentorRegisteredEvent.InputTuple,
    MentorRegisteredEvent.OutputTuple,
    MentorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MentorUpdated"
  ): TypedContractEvent<
    MentorUpdatedEvent.InputTuple,
    MentorUpdatedEvent.OutputTuple,
    MentorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "SessionCompleted"
  ): TypedContractEvent<
    SessionCompletedEvent.InputTuple,
    SessionCompletedEvent.OutputTuple,
    SessionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "SessionEnded"
  ): TypedContractEvent<
    SessionEndedEvent.InputTuple,
    SessionEndedEvent.OutputTuple,
    SessionEndedEvent.OutputObject
  >;
  getEvent(
    key: "SessionStarted"
  ): TypedContractEvent<
    SessionStartedEvent.InputTuple,
    SessionStartedEvent.OutputTuple,
    SessionStartedEvent.OutputObject
  >;
  getEvent(
    key: "StudentRegistered"
  ): TypedContractEvent<
    StudentRegisteredEvent.InputTuple,
    StudentRegisteredEvent.OutputTuple,
    StudentRegisteredEvent.OutputObject
  >;

  filters: {
    "AchievementMinted(address,uint256,uint256)": TypedContractEvent<
      AchievementMintedEvent.InputTuple,
      AchievementMintedEvent.OutputTuple,
      AchievementMintedEvent.OutputObject
    >;
    AchievementMinted: TypedContractEvent<
      AchievementMintedEvent.InputTuple,
      AchievementMintedEvent.OutputTuple,
      AchievementMintedEvent.OutputObject
    >;

    "MentorRegistered(address,string,string)": TypedContractEvent<
      MentorRegisteredEvent.InputTuple,
      MentorRegisteredEvent.OutputTuple,
      MentorRegisteredEvent.OutputObject
    >;
    MentorRegistered: TypedContractEvent<
      MentorRegisteredEvent.InputTuple,
      MentorRegisteredEvent.OutputTuple,
      MentorRegisteredEvent.OutputObject
    >;

    "MentorUpdated(address,string,string,uint256,bool)": TypedContractEvent<
      MentorUpdatedEvent.InputTuple,
      MentorUpdatedEvent.OutputTuple,
      MentorUpdatedEvent.OutputObject
    >;
    MentorUpdated: TypedContractEvent<
      MentorUpdatedEvent.InputTuple,
      MentorUpdatedEvent.OutputTuple,
      MentorUpdatedEvent.OutputObject
    >;

    "PaymentProcessed(uint256,uint256)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;

    "SessionCompleted(uint256)": TypedContractEvent<
      SessionCompletedEvent.InputTuple,
      SessionCompletedEvent.OutputTuple,
      SessionCompletedEvent.OutputObject
    >;
    SessionCompleted: TypedContractEvent<
      SessionCompletedEvent.InputTuple,
      SessionCompletedEvent.OutputTuple,
      SessionCompletedEvent.OutputObject
    >;

    "SessionEnded(address,address,uint256)": TypedContractEvent<
      SessionEndedEvent.InputTuple,
      SessionEndedEvent.OutputTuple,
      SessionEndedEvent.OutputObject
    >;
    SessionEnded: TypedContractEvent<
      SessionEndedEvent.InputTuple,
      SessionEndedEvent.OutputTuple,
      SessionEndedEvent.OutputObject
    >;

    "SessionStarted(address,address,uint256)": TypedContractEvent<
      SessionStartedEvent.InputTuple,
      SessionStartedEvent.OutputTuple,
      SessionStartedEvent.OutputObject
    >;
    SessionStarted: TypedContractEvent<
      SessionStartedEvent.InputTuple,
      SessionStartedEvent.OutputTuple,
      SessionStartedEvent.OutputObject
    >;

    "StudentRegistered(address,string)": TypedContractEvent<
      StudentRegisteredEvent.InputTuple,
      StudentRegisteredEvent.OutputTuple,
      StudentRegisteredEvent.OutputObject
    >;
    StudentRegistered: TypedContractEvent<
      StudentRegisteredEvent.InputTuple,
      StudentRegisteredEvent.OutputTuple,
      StudentRegisteredEvent.OutputObject
    >;
  };
}
